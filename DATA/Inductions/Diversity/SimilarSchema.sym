Note: DATA/inductions/diversity/Schema.sym
Note: This SYM file generated by LISA.

include Semantics2.inc
include WorldKnowledge2.inc

Analog Schema

  DefObjs
    ELEPHANT ELEPHANT =1.00 ANIMAL =1.00 MAMMAL =1.00 HUGE =1.00 TINY =-0.79 SMART =1.00 DOMESTIC =1.00 ;
    ENZYME CHEMICAL =1.00 BIO =1.00 ENZYME =1.00 ;
  end { def objs

  DefPreds
    HAS [ STATE1 =1.00 POSSESS1 =1.00 HAS11 =1.00 HAS21 =1.00 ] [ STATE2 =1.00 POSSESS2 =1.00 HAS12 =1.00 HAS22 =1.00 ] ; { done with 'HAS'
  end { def preds

  DefProps
    P0 HAS ( ELEPHANT ENZYME ) ;
  end { def props

  DefGroups
    AnimalEnzyme
       Groups: ;
       Props: P0 ;
       Semantics: GENERIC ;
      %%
  end { def groups
done { analog Schema

Analog ToVerify
  DefPreds
    HAS [ STATE1 =1.00 POSSESS1 =1.00 HAS11 =1.00 HAS21 =1.00 ] [ STATE2 =1.00 POSSESS2 =1.00 HAS12 =1.00 HAS22 =1.00 ] ;
  end
  DefObjs
    bird bird animal living fly small sing nest ;
    enzyme chemical bio-chem enzyme ;
  end
  DefProps
    P1 has ( bird enzyme ) ;
  end
  DefGroups
    ToVerify
      Props: P1 %
      Semantics: Generic %
      %%
  end
done { to verify

Sequence { 
  Driver=[ 2 ]
  ContraDetect= On { turn contradiction detection on
  Goal= Verify   { turn on explanation mode just before last prop
  Order=[ ToVerify ( 1 1 ) ]
done.
    