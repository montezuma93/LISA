Note: Negative SFI: wrong relation over-represented in LTM:Note:    2 props state right relation, 4 state wrong relationNote: Second try: First try (in BkUp1) made less semantic distinctionNote:    between Right and Wrong.  This version makes more distinction.Analog Problem { Now you must give the analog a name  DefPreds    Right 2 relation right r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 ;  end { end predicate definition with the word end  DefObjs    A object a1 a2 ;    B object b1 b2 ;  end { end object definition with the word end  DefProps    P1 Right ( A B ) ;  End ; { end with 'end'Done ; { end analog with the word doneAnalog LTM { give the analog name  DefPreds    { 2 right    RightA 2 relation right r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 ;    RightB 2 relation right r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 ;    { 4 wrong    WrongA 2 relation wrong r1 r2 r3 r4 w1 w2 w3 w4 w5 w6 w7 w8 ;    WrongB 2 relation wrong r1 r2 r3 r4 w1 w2 w3 w4 w5 w6 w7 w8 ;    WrongC 2 relation wrong r1 r2 r3 r4 w1 w2 w3 w4 w5 w6 w7 w8 ;    WrongD 2 relation wrong r1 r2 r3 r4 w1 w2 w3 w4 w5 w6 w7 w8 ;  end { end predicate definition with the word end  DefObjs    C object c1 c2 ;    D object d1 d2 ;    Dprime object dprime1 dprime2 ;    { Note: ^ may or may not be seen as a char by Build  end { end object definition with the word end  DefProps    P1 RightA ( C D ) ;    P2 RightB ( C D ) ;    P3 WrongA ( C Dprime ) ;    P4 WrongB ( C Dprime ) ;    P5 WrongC ( C Dprime ) ;    P6 WrongC ( C Dprime ) ;  End ; { end with 'end'Done ; { end the analog definition with "done"Sequence  Driver=[ 0 ] { set analog 0 to driver  Recip=[ 1 ]  { set analog 1 to recip  Order=[ P1 h P1 h P1 h P1 h ] {Done. { end with the word "done."